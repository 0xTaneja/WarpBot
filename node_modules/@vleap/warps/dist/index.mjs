import{Address as Z,ApiNetworkProvider as kt,TransactionsFactoryConfig as Ot,TransferTransactionsFactory as Lt}from"@multiversx/sdk-core";import qt from"ajv";var d={ProtocolNameWarp:"warp",ProtocolNameBrand:"warp-brand",LatestProtocolVersion:"0.4.0",LatestWarpSchemaUrl:"https://raw.githubusercontent.com/vLeapGroup/warps-specs/refs/heads/main/schemas/v0.4.0.schema.json",LatestBrandSchemaUrl:"https://raw.githubusercontent.com/vLeapGroup/warps-specs/refs/heads/main/schemas/brand/v0.1.0.schema.json",DefaultClientUrl:a=>a==="devnet"?"https://devnet.usewarp.to":a==="testnet"?"https://testnet.usewarp.to":"https://usewarp.to",SuperClientUrls:["https://usewarp.to","https://testnet.usewarp.to","https://devnet.usewarp.to"],Chain:{ApiUrl:a=>a==="devnet"?"https://devnet-api.multiversx.com":a==="testnet"?"https://testnet-api.multiversx.com":"https://api.multiversx.com"},Registry:{Contract:a=>a==="devnet"?"erd1qqqqqqqqqqqqqpgqje2f99vr6r7sk54thg03c9suzcvwr4nfl3tsfkdl36":a==="testnet"?"####":"erd1qqqqqqqqqqqqqpgq3mrpj3u6q7tejv6d7eqhnyd27n9v5c5tl3ts08mffe"},AvailableActionInputSources:["field","query"],AvailableActionInputTypes:["string","uint8","uint16","uint32","uint64","biguint","boolean","address"],AvailableActionInputPositions:["value","arg:1","arg:2","arg:3","arg:4","arg:5","arg:6","arg:7","arg:8","arg:9","arg:10"]};var T=a=>a==="devnet"?"D":a==="testnet"?"T":"1",A=a=>`${a}:${d.LatestProtocolVersion}`,B=a=>({hash:a.hash.toString("hex"),alias:a.alias?.toString()||null,trust:a.trust.toString(),creator:a.creator.toString(),createdAt:a.created_at.toNumber(),brand:a.brand?.toString("hex")||null,upgrade:a.upgrade?.toString("hex")||null}),F=(a,t)=>{let e=a.toString(),[r,n=""]=e.split("."),i=Math.abs(t);if(t>0)return BigInt(r+n.padEnd(i,"0"));if(t<0){let s=r+n;if(i>=s.length)return 0n;let o=s.slice(0,-i)||"0";return BigInt(o)}else return BigInt(a)},K=(a,t=100)=>{if(!a)return"";let e=a.replace(/<\/?(h[1-6])[^>]*>/gi," - ").replace(/<\/?(p|div|ul|ol|li|br|hr)[^>]*>/gi," ").replace(/<[^>]+>/g,"").replace(/\s+/g," ").trim();return e=e.startsWith("- ")?e.slice(2):e,e=e.length>t?e.substring(0,e.lastIndexOf(" ",t))+"...":e,e};var X=class{constructor(t){this.pendingBrand={protocol:A(d.ProtocolNameBrand),name:"",description:"",logo:""};this.config=t}createInscriptionTransaction(t){if(!this.config.userAddress)throw new Error("BrandBuilder: user address not set");let e=new Ot({chainID:T(this.config.env)}),r=new Lt({config:e}),n=JSON.stringify(t);return r.createTransactionForNativeTokenTransfer({sender:Z.newFromBech32(this.config.userAddress),receiver:Z.newFromBech32(this.config.userAddress),nativeAmount:BigInt(0),data:Buffer.from(n).valueOf()})}async createFromRaw(t,e=!0){let r=JSON.parse(t);return e&&await this.ensureValidSchema(r),r}async createFromTransaction(t,e=!1){return await this.createFromRaw(t.data.toString(),e)}async createFromTransactionHash(t){let e=new kt(this.config.chainApiUrl||d.Chain.ApiUrl(this.config.env));try{let r=await e.getTransaction(t);return this.createFromTransaction(r)}catch(r){return console.error("BrandBuilder: Error creating from transaction hash",r),null}}setName(t){return this.pendingBrand.name=t,this}setDescription(t){return this.pendingBrand.description=t,this}setLogo(t){return this.pendingBrand.logo=t,this}setUrls(t){return this.pendingBrand.urls=t,this}setColors(t){return this.pendingBrand.colors=t,this}setCta(t){return this.pendingBrand.cta=t,this}async build(){return this.ensure(this.pendingBrand.name,"name is required"),this.ensure(this.pendingBrand.description,"description is required"),this.ensure(this.pendingBrand.logo,"logo is required"),await this.ensureValidSchema(this.pendingBrand),this.pendingBrand}ensure(t,e){if(!t)throw new Error(`Warp: ${e}`)}async ensureValidSchema(t){let e=this.config.brandSchemaUrl||d.LatestBrandSchemaUrl,n=await(await fetch(e)).json(),i=new qt,s=i.compile(n);if(!s(t))throw new Error(`BrandBuilder: schema validation failed: ${i.errorsText(s.errors)}`)}};var y={HttpProtocolPrefix:"http",IdentifierParamName:"warp",IdentifierParamSeparator:":",DefaultIdentifierType:"alias",Egld:{Identifier:"EGLD",DisplayName:"eGold",Decimals:18}};import{Address as Dt,AddressValue as _t,BigUIntType as Qt,BigUIntValue as Y,BooleanValue as Ht,BytesValue as jt,CodeMetadata as Mt,CodeMetadataValue as zt,CompositeType as Gt,CompositeValue as Jt,Field as N,FieldDefinition as E,List as Kt,NothingValue as Zt,OptionalValue as $,OptionValue as k,StringValue as Xt,Struct as Yt,StructType as te,TokenIdentifierType as ee,TokenIdentifierValue as tt,U16Value as re,U32Value as ne,U64Type as ie,U64Value as et,U8Value as se,VariadicValue as ae}from"@multiversx/sdk-core/out";var Ke=(a,t)=>a?k.newProvided(a):t?k.newMissingTyped(t):k.newMissing(),Ze=(a,t)=>a?new $(a.getType(),a):t?new $(t):$.newMissing(),Xe=a=>{if(a.length===0)throw new Error("Cannot create a list from an empty array");let t=a[0].getType();return new Kt(t,a)},Ye=a=>ae.fromItems(...a),tr=a=>{let t=a.map(e=>e.getType());return new Jt(new Gt(...t),a)},er=a=>Xt.fromUTF8(a),rr=a=>new se(a),nr=a=>new re(a),ir=a=>new ne(a),sr=a=>new et(a),ar=a=>new Y(BigInt(a)),or=a=>new Ht(a),cr=a=>new _t(Dt.newFromBech32(a)),pr=a=>new tt(a),ur=a=>jt.fromHex(a),lr=a=>new Yt(new te("EsdtTokenPayment",[new E("token_identifier","",new ee),new E("token_nonce","",new ie),new E("amount","",new Qt)]),[new N(new tt(a.token.identifier),"token_identifier"),new N(new et(BigInt(a.token.nonce)),"token_nonce"),new N(new Y(BigInt(a.amount)),"amount")]),dr=a=>new zt(Mt.fromBuffer(Buffer.from(a,"hex"))),gr=()=>new Zt;import{AbiRegistry as Bt,Address as vt,ApiNetworkProvider as ge,QueryRunnerAdapter as fe,ResultsParser as me,SmartContractQueriesController as he,SmartContractTransactionsFactory as ye,StringValue as we,Token as Te,TokenTransfer as We,TransactionsFactoryConfig as Ce,TransferTransactionsFactory as Ie}from"@multiversx/sdk-core/out";import{Address as oe,AddressType as rt,AddressValue as nt,BigUIntType as O,BigUIntValue as L,BooleanType as it,BooleanValue as st,BytesType as at,BytesValue as ot,CodeMetadata as ce,CodeMetadataType as ct,CodeMetadataValue as pt,CompositeType as ut,CompositeValue as lt,Field as q,FieldDefinition as D,List as dt,NothingValue as h,OptionalValue as _,OptionValue as Q,StringType as gt,StringValue as ft,Struct as pe,StructType as mt,Token as ue,TokenIdentifierType as H,TokenIdentifierValue as j,TokenTransfer as ht,U16Type as yt,U16Value as wt,U32Type as Tt,U32Value as Wt,U64Type as M,U64Value as z,U8Type as Ct,U8Value as It,VariadicType as le,VariadicValue as bt}from"@multiversx/sdk-core/out";var f=":",w="|",At=new RegExp(`${f}(.*)`),v=class{nativeToString(t,e){return t==="esdt"&&e instanceof ht?`esdt:${e.token.identifier}|${e.token.nonce.toString()}|${e.amount.toString()}`:`${t}:${e?.toString()??""}`}typedToString(t){if(t.hasClassOrSuperclass(Q.ClassName))return t.isSet()?`option:${this.typedToString(t.getTypedValue())}`:"option:null";if(t.hasClassOrSuperclass(_.ClassName))return t.isSet()?`optional:${this.typedToString(t.getTypedValue())}`:"optional:null";if(t.hasClassOrSuperclass(dt.ClassName)){let e=t.getItems(),n=e.map(s=>this.typedToString(s).split(f)[0])[0],i=e.map(s=>this.typedToString(s).split(f)[1]);return`list:${n}:${i.join(",")}`}if(t.hasClassOrSuperclass(bt.ClassName)){let e=t.getItems(),n=e.map(s=>this.typedToString(s).split(f)[0])[0],i=e.map(s=>this.typedToString(s).split(f)[1]);return`variadic:${n}:${i.join(",")}`}if(t.hasClassOrSuperclass(lt.ClassName)){let e=t.getItems(),r=e.map(o=>this.typedToString(o).split(f)[0]),n=e.map(o=>this.typedToString(o).split(f)[1]),i=r.join(w),s=n.join(w);return`composite(${i}):${s}`}if(t.hasClassOrSuperclass(L.ClassName)||t.getType().getName()==="BigUint")return`biguint:${BigInt(t.valueOf().toFixed())}`;if(t.hasClassOrSuperclass(It.ClassName))return`uint8:${t.valueOf().toNumber()}`;if(t.hasClassOrSuperclass(wt.ClassName))return`uint16:${t.valueOf().toNumber()}`;if(t.hasClassOrSuperclass(Wt.ClassName))return`uint32:${t.valueOf().toNumber()}`;if(t.hasClassOrSuperclass(z.ClassName))return`uint64:${BigInt(t.valueOf().toFixed())}`;if(t.hasClassOrSuperclass(ft.ClassName))return`string:${t.valueOf()}`;if(t.hasClassOrSuperclass(st.ClassName))return`bool:${t.valueOf()}`;if(t.hasClassOrSuperclass(nt.ClassName))return`address:${t.valueOf().bech32()}`;if(t.hasClassOrSuperclass(j.ClassName))return`token:${t.valueOf()}`;if(t.hasClassOrSuperclass(ot.ClassName))return`hex:${t.valueOf().toString("hex")}`;if(t.hasClassOrSuperclass(pt.ClassName))return`codemeta:${t.valueOf().toBuffer().toString("hex")}`;if(t.getType().getName()==="EsdtTokenPayment"){let e=t.getFieldValue("token_identifier").valueOf(),r=t.getFieldValue("token_nonce").valueOf(),n=t.getFieldValue("amount").valueOf();return`esdt:${e}|${r}|${n}`}throw new Error(`WarpArgSerializer (typedToString): Unsupported input type: ${t.getClassName()}`)}typedToNative(t){let e=this.typedToString(t);return this.stringToNative(e)}nativeToTyped(t,e){let r=this.nativeToString(t,e);return this.stringToTyped(r)}nativeToType(t){if(t.startsWith("composite")){let e=t.match(/\(([^)]+)\)/)?.[1];return new ut(...e.split(w).map(r=>this.nativeToType(r)))}if(t==="string")return new gt;if(t==="uint8")return new Ct;if(t==="uint16")return new yt;if(t==="uint32")return new Tt;if(t==="uint64")return new M;if(t==="biguint")return new O;if(t==="bool")return new it;if(t==="address")return new rt;if(t==="token")return new H;if(t==="hex")return new at;if(t==="codemeta")return new ct;if(t==="esdt"||t==="nft")return new mt("EsdtTokenPayment",[new D("token_identifier","",new H),new D("token_nonce","",new M),new D("amount","",new O)]);throw new Error(`WarpArgSerializer (nativeToType): Unsupported input type: ${t}`)}stringToNative(t){let e=t.split(f),r=e[0],n=e.slice(1).join(f);if(r==="null")return[r,null];if(r==="option"){let[i,s]=n.split(f);return[`option:${i}`,s||null]}else if(r==="optional"){let[i,s]=n.split(f);return[`optional:${i}`,s||null]}else if(r==="list"){let i=n.split(f),s=i.slice(0,-1).join(f),o=i[i.length-1],c=(o?o.split(","):[]).map(u=>this.stringToNative(`${s}:${u}`)[1]);return[`list:${s}`,c]}else if(r==="variadic"){let i=n.split(f),s=i.slice(0,-1).join(f),o=i[i.length-1],c=(o?o.split(","):[]).map(u=>this.stringToNative(`${s}:${u}`)[1]);return[`variadic:${s}`,c]}else if(r.startsWith("composite")){let i=r.match(/\(([^)]+)\)/)?.[1]?.split(w),o=n.split(w).map((p,c)=>this.stringToNative(`${i[c]}:${p}`)[1]);return[r,o]}else{if(r==="string")return[r,n];if(r==="uint8"||r==="uint16"||r==="uint32")return[r,Number(n)];if(r==="uint64"||r==="biguint")return[r,BigInt(n||0)];if(r==="bool")return[r,n==="true"];if(r==="address")return[r,n];if(r==="token")return[r,n];if(r==="hex")return[r,n];if(r==="codemeta")return[r,n];if(r==="esdt"){let[i,s,o]=n.split(w);return[r,new ht({token:new ue({identifier:i,nonce:BigInt(s)}),amount:BigInt(o)})]}}throw new Error(`WarpArgSerializer (stringToNative): Unsupported input type: ${r}`)}stringToTyped(t){let[e,r]=t.split(/:(.*)/,2);if(e==="null"||e===null)return new h;if(e==="option"){let n=this.stringToTyped(r);return n instanceof h?Q.newMissingTyped(n.getType()):Q.newProvided(n)}if(e==="optional"){let n=this.stringToTyped(r);return n instanceof h?_.newMissing():new _(n.getType(),n)}if(e==="list"){let[n,i]=r.split(At,2),o=i.split(",").map(p=>this.stringToTyped(`${n}:${p}`));return new dt(this.nativeToType(n),o)}if(e==="variadic"){let[n,i]=r.split(At,2),o=i.split(",").map(p=>this.stringToTyped(`${n}:${p}`));return new bt(new le(this.nativeToType(n)),o)}if(e.startsWith("composite")){let n=e.match(/\(([^)]+)\)/)?.[1],i=r.split(w),s=n.split(w),o=i.map((c,u)=>this.stringToTyped(`${s[u]}:${c}`)),p=o.map(c=>c.getType());return new lt(new ut(...p),o)}if(e==="string")return r?ft.fromUTF8(r):new h;if(e==="uint8")return r?new It(Number(r)):new h;if(e==="uint16")return r?new wt(Number(r)):new h;if(e==="uint32")return r?new Wt(Number(r)):new h;if(e==="uint64")return r?new z(BigInt(r)):new h;if(e==="biguint")return r?new L(BigInt(r)):new h;if(e==="bool")return r?new st(typeof r=="boolean"?r:r==="true"):new h;if(e==="address")return r?new nt(oe.newFromBech32(r)):new h;if(e==="token")return r?new j(r):new h;if(e==="hex")return r?ot.fromHex(r):new h;if(e==="codemeta")return new pt(ce.fromBuffer(Buffer.from(r,"hex")));if(e==="esdt"){let n=r.split(w);return new pe(this.nativeToType("esdt"),[new q(new j(n[0]),"token_identifier"),new q(new z(BigInt(n[1])),"token_nonce"),new q(new L(BigInt(n[2])),"amount")])}throw new Error(`WarpArgSerializer (stringToTyped): Unsupported input type: ${e}`)}typeToNative(t){if(t instanceof gt)return"string";if(t instanceof Ct)return"uint8";if(t instanceof yt)return"uint16";if(t instanceof Tt)return"uint32";if(t instanceof M)return"uint64";if(t instanceof O)return"biguint";if(t instanceof it)return"bool";if(t instanceof rt)return"address";if(t instanceof H)return"token";if(t instanceof at)return"hex";if(t instanceof ct)return"codemeta";if(t instanceof mt&&t.getClassName()==="EsdtTokenPayment")return"esdt";throw new Error(`WarpArgSerializer (typeToNative): Unsupported input type: ${t.getClassName()}`)}};import{ApiNetworkProvider as de}from"@multiversx/sdk-core/out";var x=class{constructor(t){this.config=t}async getContract(t){try{let r=await this.getConfiguredChainApi().doGetGeneric(`accounts/${t}/verification`);return{address:t,owner:r.ownerAddress,verified:r.isVerified}}catch(e){return console.error("WarpContractLoader: getContract error",e),null}}async getVerificationInfo(t){try{let r=await this.getConfiguredChainApi().doGetGeneric(`accounts/${t}/verification`);return{codeHash:r.codeHash,abi:r.source.abi}}catch(e){return console.error("WarpContractLoader: getVerificationInfo error",e),null}}getConfiguredChainApi(){if(!this.config.chainApiUrl)throw new Error("WarpContract: Chain API URL not set");return new de(this.config.chainApiUrl,{timeout:3e4})}};var xt=class{constructor(t){if(!t.currentUrl)throw new Error("WarpActionExecutor: currentUrl config not set");this.config=t,this.url=new URL(t.currentUrl),this.serializer=new v,this.contractLoader=new x(t)}createTransactionForExecute(t,e,r){if(!this.config.userAddress)throw new Error("WarpActionExecutor: user address not set");let n=vt.newFromBech32(this.config.userAddress),i=vt.newFromBech32(t.address),s=new Ce({chainID:T(this.config.env)}),{args:o,value:p,transfers:c}=this.getTxComponentsFromInputs(t,e,r),u=o.map(l=>this.serializer.stringToTyped(l));return i.isContractAddress()?new ye({config:s}).createTransactionForExecute({sender:n,contract:i,function:t.func||"",gasLimit:BigInt(t.gasLimit),arguments:u,tokenTransfers:c,nativeTransferAmount:p}):new Ie({config:s}).createTransactionForTransfer({sender:n,receiver:i,nativeAmount:p,tokenTransfers:c,data:u[0]?.hasExactClass(we.ClassName)?u[0].valueOf():void 0})}async executeQuery(t,e){if(!this.config.chainApiUrl)throw new Error("WarpActionExecutor: Chain API URL not set");if(!t.func)throw new Error("WarpActionExecutor: Function not found");let r=new ge(this.config.chainApiUrl,{timeout:3e4}),n=new fe({networkProvider:r}),i=await this.getAbiForAction(t),{args:s}=this.getTxComponentsFromInputs(t,e,[]),o=s.map(U=>this.serializer.stringToTyped(U)),p=new he({queryRunner:n,abi:i}),c=p.createQuery({contract:t.address,function:t.func,arguments:o}),u=await p.runQuery(c),l=new me,P={returnCode:u.returnCode,returnMessage:u.returnMessage,getReturnDataParts:()=>u.returnDataParts.map(U=>Buffer.from(U))},Et=u.function,$t=i.getEndpoint(Et),J=l.parseQueryResponse(P,$t).firstValue;if(!J)throw new Error("WarpActionExecutor: Query result not found");return J}async executeCollect(t,e,r){let n=new Headers;n.set("Content-Type","application/json"),n.set("Accept","application/json"),Object.entries(t.destination.headers).forEach(([i,s])=>{n.set(i,s)}),await fetch(t.destination.url,{method:t.destination.method,headers:n,body:JSON.stringify({inputs:e,meta:r})})}getTxComponentsFromInputs(t,e,r){let n=this.getResolvedInputs(t,e),i=this.getModifiedInputs(n),s=this.getPreparedArgs(t,i),o=i.find(P=>P.input.position==="value")?.value||null,p="value"in t?t.value:null,c=BigInt(o?.split(":")[1]||p||0),l=[...("transfers"in t?t.transfers:[])?.map(this.toTypedTransfer)||[],...r];return{args:s,value:c,transfers:l}}getModifiedInputs(t){return t.map((e,r)=>{if(e.input.modifier?.startsWith("scale:")){let[,n]=e.input.modifier.split(":");if(isNaN(Number(n))){let i=Number(t.find(p=>p.input.name===n)?.value?.split(":")[1]);if(!i)throw new Error(`WarpActionExecutor: Exponent value not found for input ${n}`);let s=e.value?.split(":")[1];if(!s)throw new Error("WarpActionExecutor: Scalable value not found");let o=F(s,+i);return{...e,value:`${e.input.type}:${o}`}}else{let i=e.value?.split(":")[1];if(!i)throw new Error("WarpActionExecutor: Scalable value not found");let s=F(i,+n);return{...e,value:`${e.input.type}:${s}`}}}else return e})}getResolvedInputs(t,e){let r=t.inputs||[],n=(i,s)=>i.source==="query"?this.serializer.nativeToString(i.type,this.url.searchParams.get(i.name)||""):e[s]||null;return r.map((i,s)=>({input:i,value:n(i,s)}))}getPreparedArgs(t,e){let r="args"in t?t.args:[];return e.forEach(({input:n,value:i})=>{if(!i||!n.position.startsWith("arg:"))return;let s=Number(n.position.split(":")[1])-1;r.splice(s,0,i)}),r}async getAbiForAction(t){if(t.abi)return await this.fetchAbi(t);let e=await this.contractLoader.getVerificationInfo(t.address);if(!e)throw new Error("WarpActionExecutor: Verification info not found");return Bt.create(e.abi)}async fetchAbi(t){if(!t.abi)throw new Error("WarpActionExecutor: ABI not found");let r=await(await fetch(t.abi)).json();return Bt.create(r)}toTypedTransfer(t){return new We({token:new Te({identifier:t.token,nonce:BigInt(t.nonce||0)}),amount:BigInt(t.amount||0)})}};import{Address as Ft,ApiNetworkProvider as Pe,TransactionsFactoryConfig as Ue,TransferTransactionsFactory as Fe}from"@multiversx/sdk-core";var I={Warp:a=>`warp:${a}`,RegistryInfo:a=>`registry-info:${a}`,Brand:a=>`brand:${a}`},C=class{constructor(){this.cache=new Map}set(t,e,r){let n=Date.now()+r*1e3;this.cache.set(t,{value:e,expiresAt:n})}get(t){let e=this.cache.get(t);return e?Date.now()>e.expiresAt?(this.cache.delete(t),null):e.value:null}clear(){this.cache.clear()}};import Ve from"qr-code-styling";import{AbiRegistry as Vt,Address as g,AddressValue as St,ApiNetworkProvider as Rt,BytesValue as m,QueryRunnerAdapter as Ae,SmartContractQueriesController as Be,SmartContractTransactionsFactory as ve,TransactionsFactoryConfig as xe}from"@multiversx/sdk-core/out";var G={buildInfo:{rustc:{version:"1.80.0-nightly",commitHash:"791adf759cc065316f054961875052d5bc03e16c",commitDate:"2024-05-21",channel:"Nightly",short:"rustc 1.80.0-nightly (791adf759 2024-05-21)"},contractCrate:{name:"registry",version:"0.0.1"},framework:{name:"multiversx-sc",version:"0.51.1"}},name:"RegistryContract",constructor:{inputs:[{name:"unit_price",type:"BigUint"},{name:"vault",type:"Address"}],outputs:[]},upgradeConstructor:{inputs:[],outputs:[]},endpoints:[{name:"registerWarp",mutability:"mutable",payableInTokens:["EGLD"],inputs:[{name:"hash",type:"bytes"},{name:"alias_opt",type:"optional<bytes>",multi_arg:!0},{name:"brand_opt",type:"optional<bytes>",multi_arg:!0}],outputs:[],allow_multiple_var_args:!0},{name:"unregisterWarp",mutability:"mutable",inputs:[{name:"warp",type:"bytes"}],outputs:[]},{name:"upgradeWarp",mutability:"mutable",payableInTokens:["EGLD"],inputs:[{name:"alias",type:"bytes"},{name:"new_warp",type:"bytes"}],outputs:[]},{name:"setWarpAlias",mutability:"mutable",payableInTokens:["EGLD"],inputs:[{name:"hash",type:"bytes"},{name:"alias",type:"bytes"}],outputs:[]},{name:"publishWarp",mutability:"mutable",payableInTokens:["EGLD"],inputs:[{name:"hash",type:"bytes"}],outputs:[]},{name:"getUserWarps",mutability:"readonly",inputs:[{name:"address",type:"Address"}],outputs:[{type:"variadic<InfoView>",multi_result:!0}]},{name:"getInfoByAlias",mutability:"readonly",inputs:[{name:"alias",type:"bytes"}],outputs:[{type:"InfoView"}]},{name:"getInfoByHash",mutability:"readonly",inputs:[{name:"hash",type:"bytes"}],outputs:[{type:"InfoView"}]},{name:"setVault",onlyOwner:!0,mutability:"mutable",inputs:[{name:"vault",type:"Address"}],outputs:[]},{name:"setUnitPrice",onlyOwner:!0,mutability:"mutable",inputs:[{name:"amount",type:"BigUint"}],outputs:[]},{name:"getConfig",mutability:"readonly",inputs:[],outputs:[{type:"BigUint"}]},{name:"registerBrand",mutability:"mutable",payableInTokens:["EGLD"],inputs:[{name:"hash",type:"bytes"}],outputs:[]},{name:"brandWarp",mutability:"mutable",payableInTokens:["EGLD"],inputs:[{name:"warp",type:"bytes"},{name:"brand",type:"bytes"}],outputs:[]},{name:"getUserBrands",mutability:"readonly",inputs:[{name:"user",type:"Address"}],outputs:[{type:"variadic<bytes>",multi_result:!0}]}],events:[{identifier:"warpRegistered",inputs:[{name:"hash",type:"bytes",indexed:!0},{name:"alias",type:"bytes",indexed:!0}]},{identifier:"warpUnregistered",inputs:[{name:"hash",type:"bytes",indexed:!0}]},{identifier:"warpUpgraded",inputs:[{name:"alias",type:"bytes",indexed:!0},{name:"new_warp",type:"bytes",indexed:!0}]},{identifier:"warpPublished",inputs:[{name:"hash",type:"bytes",indexed:!0}]},{identifier:"aliasUpdated",inputs:[{name:"hash",type:"bytes",indexed:!0},{name:"alias",type:"bytes",indexed:!0}]}],esdtAttributes:[],hasCallback:!1,types:{InfoView:{type:"struct",fields:[{name:"hash",type:"bytes"},{name:"alias",type:"Option<bytes>"},{name:"trust",type:"bytes"},{name:"creator",type:"Address"},{name:"created_at",type:"u64"},{name:"brand",type:"Option<bytes>"},{name:"upgrade",type:"Option<bytes>"}]}}};var V=class{constructor(t){this.cache=new C;this.config=t,this.unitPrice=BigInt(0)}async init(){await this.loadRegistryConfigs()}createWarpRegisterTransaction(t,e){if(this.unitPrice===BigInt(0))throw new Error("WarpRegistry: config not loaded. forgot to call init()?");if(!this.config.userAddress)throw new Error("WarpRegistry: user address not set");let r=e?this.unitPrice*BigInt(2):this.unitPrice;return this.getFactory().createTransactionForExecute({sender:g.newFromBech32(this.config.userAddress),contract:g.newFromBech32(this.getRegistryContractAddress()),function:"registerWarp",gasLimit:BigInt(1e7),nativeTransferAmount:r,arguments:e?[m.fromHex(t),m.fromUTF8(e)]:[m.fromHex(t)]})}createWarpUnregisterTransaction(t){if(!this.config.userAddress)throw new Error("WarpRegistry: user address not set");return this.getFactory().createTransactionForExecute({sender:g.newFromBech32(this.config.userAddress),contract:g.newFromBech32(this.getRegistryContractAddress()),function:"unregisterWarp",gasLimit:BigInt(1e7),arguments:[m.fromHex(t)]})}createWarpUpgradeTransaction(t,e){if(this.unitPrice===BigInt(0))throw new Error("WarpRegistry: config not loaded. forgot to call init()?");if(!this.config.userAddress)throw new Error("WarpRegistry: user address not set");return this.getFactory().createTransactionForExecute({sender:g.newFromBech32(this.config.userAddress),contract:g.newFromBech32(this.getRegistryContractAddress()),function:"upgradeWarp",gasLimit:BigInt(1e7),nativeTransferAmount:this.unitPrice,arguments:[m.fromUTF8(t),m.fromHex(e)]})}createWarpAliasSetTransaction(t,e){if(!this.config.userAddress)throw new Error("WarpRegistry: user address not set");return this.getFactory().createTransactionForExecute({sender:g.newFromBech32(this.config.userAddress),contract:g.newFromBech32(this.getRegistryContractAddress()),function:"setWarpAlias",gasLimit:BigInt(1e7),nativeTransferAmount:this.unitPrice,arguments:[m.fromHex(t),m.fromUTF8(e)]})}createBrandRegisterTransaction(t){if(this.unitPrice===BigInt(0))throw new Error("WarpRegistry: config not loaded. forgot to call init()?");if(!this.config.userAddress)throw new Error("WarpRegistry: user address not set");return this.getFactory().createTransactionForExecute({sender:g.newFromBech32(this.config.userAddress),contract:g.newFromBech32(this.getRegistryContractAddress()),function:"registerBrand",gasLimit:BigInt(1e7),nativeTransferAmount:this.unitPrice,arguments:[m.fromHex(t)]})}createWarpPublishTransaction(t){if(!this.config.userAddress)throw new Error("WarpRegistry: user address not set");return this.getFactory().createTransactionForExecute({sender:g.newFromBech32(this.config.userAddress),contract:g.newFromBech32(this.getRegistryContractAddress()),function:"publishWarp",gasLimit:BigInt(1e7),nativeTransferAmount:this.unitPrice,arguments:[m.fromHex(t)]})}createWarpBrandingTransaction(t,e){if(!this.config.userAddress)throw new Error("WarpRegistry: user address not set");return this.getFactory().createTransactionForExecute({sender:g.newFromBech32(this.config.userAddress),contract:g.newFromBech32(this.getRegistryContractAddress()),function:"brandWarp",gasLimit:BigInt(1e7),nativeTransferAmount:this.unitPrice,arguments:[m.fromHex(t),m.fromHex(e)]})}async getInfoByAlias(t,e){let r=I.RegistryInfo(t);if(e){let l=this.cache.get(r);if(l)return console.log(`WarpRegistry (getInfoByAlias): RegistryInfo found in cache: ${t}`),l}let n=this.getRegistryContractAddress(),i=this.getController(),s=i.createQuery({contract:n,function:"getInfoByAlias",arguments:[m.fromUTF8(t)]}),o=await i.runQuery(s),[p]=i.parseQueryResponse(o),c=p?B(p):null,u=c?.brand?await this.fetchBrand(c.brand):null;return e&&e.ttl&&this.cache.set(r,{registryInfo:c,brand:u},e.ttl),{registryInfo:c,brand:u}}async getInfoByHash(t,e){let r=I.RegistryInfo(t);if(e){let l=this.cache.get(r);if(l)return console.log(`WarpRegistry (getInfoByHash): RegistryInfo found in cache: ${t}`),l}let n=this.getRegistryContractAddress(),i=this.getController(),s=i.createQuery({contract:n,function:"getInfoByHash",arguments:[m.fromHex(t)]}),o=await i.runQuery(s),[p]=i.parseQueryResponse(o),c=p?B(p):null,u=c?.brand?await this.fetchBrand(c.brand):null;return e&&e.ttl&&this.cache.set(r,{registryInfo:c,brand:u},e.ttl),{registryInfo:c,brand:u}}async getUserWarpRegistryInfos(t){let e=t||this.config.userAddress;if(!e)throw new Error("WarpRegistry: user address not set");let r=this.getRegistryContractAddress(),n=this.getController(),i=n.createQuery({contract:r,function:"getUserWarps",arguments:[new St(new g(e))]}),s=await n.runQuery(i),[o]=n.parseQueryResponse(s);return o.map(B)}async getUserBrands(t){let e=t||this.config.userAddress;if(!e)throw new Error("WarpRegistry: user address not set");let r=this.getRegistryContractAddress(),n=this.getController(),i=n.createQuery({contract:r,function:"getUserBrands",arguments:[new St(new g(e))]}),s=await n.runQuery(i),[o]=n.parseQueryResponse(s),p=o.map(l=>l.toString("hex")),c={ttl:365*24*60*60};return(await Promise.all(p.map(l=>this.fetchBrand(l,c)))).filter(l=>l!==null)}async fetchBrand(t,e){let r=I.Brand(t);if(e){let i=this.cache.get(r);if(i)return console.log(`WarpRegistry (fetchBrand): Brand found in cache: ${t}`),i}let n=new Rt(this.config.chainApiUrl||d.Chain.ApiUrl(this.config.env));try{let i=await n.getTransaction(t),s=JSON.parse(i.data.toString());return s.meta={hash:i.hash,creator:i.sender.bech32(),createdAt:new Date(i.timestamp*1e3).toISOString()},e&&e.ttl&&this.cache.set(r,s,e.ttl),s}catch(i){return console.error("WarpRegistry: Error fetching brand from transaction hash",i),null}}getRegistryContractAddress(){return this.config.registryContract||d.Registry.Contract(this.config.env)}async loadRegistryConfigs(){let t=this.getRegistryContractAddress(),e=this.getController(),r=e.createQuery({contract:t,function:"getConfig",arguments:[]}),n=await e.runQuery(r),[i]=e.parseQueryResponse(n),s=BigInt(i.toString());this.unitPrice=s}getFactory(){let t=new xe({chainID:T(this.config.env)}),e=Vt.create(G);return new ve({config:t,abi:e})}getController(){let t=this.config.chainApiUrl||d.Chain.ApiUrl(this.config.env),e=new Rt(t,{timeout:3e4}),r=new Ae({networkProvider:e}),n=Vt.create(G);return new Be({queryRunner:r,abi:n})}};var S=class{constructor(t){this.config=t;this.config=t}isValid(t){return t.startsWith(y.HttpProtocolPrefix)?!!this.extractIdentifierInfoFromUrl(t):!1}async detectFromHtml(t){if(!t.length)return{match:!1,results:[]};let n=[...t.matchAll(/https?:\/\/[^\s"'<>]+/gi)].map(c=>c[0]).filter(c=>this.isValid(c)).map(c=>this.detect(c)),s=(await Promise.all(n)).filter(c=>c.match),o=s.length>0,p=s.map(c=>({url:c.url,warp:c.warp}));return{match:o,results:p}}async detect(t){let e=t.startsWith(y.HttpProtocolPrefix)?this.extractIdentifierInfoFromUrl(t):W.getInfoFromPrefixedIdentifier(t);if(!e)return{match:!1,url:t,warp:null,registryInfo:null,brand:null};let{type:r,id:n}=e,i=new R(this.config),s=new V(this.config),o=null,p=null,c=null;if(r==="hash"){o=await i.createFromTransactionHash(n);try{let{registryInfo:u,brand:l}=await s.getInfoByHash(n);p=u,c=l}catch{}}else if(r==="alias"){let{registryInfo:u,brand:l}=await s.getInfoByAlias(n);p=u,c=l,u&&(o=await i.createFromTransactionHash(u.hash))}return o?{match:!0,url:t,warp:o,registryInfo:p,brand:c}:{match:!1,url:t,warp:null,registryInfo:null,brand:null}}build(t,e){let r=this.config.clientUrl||d.DefaultClientUrl(this.config.env),n=t===y.DefaultIdentifierType?encodeURIComponent(e):encodeURIComponent(t+y.IdentifierParamSeparator+e);return d.SuperClientUrls.includes(r)?`${r}/${n}`:`${r}?${y.IdentifierParamName}=${n}`}generateQrCode(t,e,r=512,n="white",i="black",s="#23F7DD"){let o=this.build(t,e);return new Ve({type:"svg",width:r,height:r,data:String(o),margin:16,qrOptions:{typeNumber:0,mode:"Byte",errorCorrectionLevel:"Q"},backgroundOptions:{color:n},dotsOptions:{type:"extra-rounded",color:i},cornersSquareOptions:{type:"extra-rounded",color:i},cornersDotOptions:{type:"square",color:i},imageOptions:{hideBackgroundDots:!0,imageSize:.4,margin:8},image:`data:image/svg+xml;utf8,<svg width="16" height="16" viewBox="0 0 100 100" fill="${encodeURIComponent(s)}" xmlns="http://www.w3.org/2000/svg"><path d="M54.8383 50.0242L95 28.8232L88.2456 16L51.4717 30.6974C50.5241 31.0764 49.4759 31.0764 48.5283 30.6974L11.7544 16L5 28.8232L45.1616 50.0242L5 71.2255L11.7544 84.0488L48.5283 69.351C49.4759 68.9724 50.5241 68.9724 51.4717 69.351L88.2456 84.0488L95 71.2255L54.8383 50.0242Z"/></svg>`})}extractIdentifierInfoFromUrl(t){let e=new URL(t),r=d.SuperClientUrls.includes(e.origin),n=e.searchParams.get(y.IdentifierParamName),i=r&&!n?e.pathname.split("/")[1]:n;if(!i)return null;let s=decodeURIComponent(i);return W.getInfoFromPrefixedIdentifier(s)}};var Se="https://",Pt="query",Ut="env",W=class a{static prepareVars(t,e){if(!t?.vars)return t;let r=JSON.stringify(t),n=(i,s)=>{r=r.replace(new RegExp(`{{${i.toUpperCase()}}}`,"g"),s.toString())};return Object.entries(t.vars).forEach(([i,s])=>{if(typeof s=="string"&&s.startsWith(`${Pt}:`)){if(!e.currentUrl)throw new Error("WarpUtils: currentUrl config is required to prepare vars");let o=s.split(`${Pt}:`)[1],p=new URL(e.currentUrl).searchParams.get(o);p&&n(i,p)}else if(typeof s=="string"&&s.startsWith(`${Ut}:`)){let o=s.split(`${Ut}:`)[1],p=e.vars?.[o];p&&n(i,p)}else n(i,s)}),JSON.parse(r)}static getInfoFromPrefixedIdentifier(t){let e=decodeURIComponent(t),r=e.includes(y.IdentifierParamSeparator)?e:`${y.DefaultIdentifierType}${y.IdentifierParamSeparator}${e}`,[n,i]=r.split(y.IdentifierParamSeparator);return{type:n,id:i}}static getNextStepUrl(t,e){if(!t?.next)return null;if(t.next.startsWith(Se))return t.next;{let r=new S(e),n=a.getInfoFromPrefixedIdentifier(t.next);return n?r.build(n.type,n.id):null}}};import Re from"ajv";var b=class{constructor(t){this.config=t;this.config=t}async validate(t){this.ensureMaxOneValuePosition(t),await this.ensureValidSchema(t)}ensureMaxOneValuePosition(t){if(t.actions.filter(r=>"position"in r?r.position==="value":!1).length>1)throw new Error("WarpBuilder: only one value position action is allowed")}async ensureValidSchema(t){let e=this.config.warpSchemaUrl||d.LatestWarpSchemaUrl,n=await(await fetch(e)).json(),i=new Re,s=i.compile(n);if(!s(t))throw new Error(`WarpBuilder: schema validation failed: ${i.errorsText(s.errors)}`)}};var R=class{constructor(t){this.cache=new C;this.pendingWarp={protocol:A(d.ProtocolNameWarp),name:"",title:"",description:null,preview:"",actions:[]};this.config=t}createInscriptionTransaction(t){if(!this.config.userAddress)throw new Error("WarpBuilder: user address not set");let e=new Ue({chainID:T(this.config.env)}),r=new Fe({config:e}),n=JSON.stringify(t),i=r.createTransactionForTransfer({sender:Ft.newFromBech32(this.config.userAddress),receiver:Ft.newFromBech32(this.config.userAddress),nativeAmount:BigInt(0),data:Buffer.from(n).valueOf()});return i.gasLimit=i.gasLimit+BigInt(2e6),i}async createFromRaw(t,e=!0){let r=JSON.parse(t);return e&&await new b(this.config).validate(r),W.prepareVars(r,this.config)}async createFromTransaction(t,e=!1){let r=await this.createFromRaw(t.data.toString(),e);return r.meta={hash:t.hash,creator:t.sender.bech32(),createdAt:new Date(t.timestamp*1e3).toISOString()},r}async createFromTransactionHash(t,e){let r=I.Warp(t);if(e){let i=this.cache.get(r);if(i)return console.log(`WarpBuilder (createFromTransactionHash): Warp found in cache: ${t}`),i}let n=new Pe(this.config.chainApiUrl||d.Chain.ApiUrl(this.config.env));try{let i=await n.getTransaction(t),s=await this.createFromTransaction(i);return e&&e.ttl&&s&&this.cache.set(r,s,e.ttl),s}catch(i){return console.error("WarpBuilder: Error creating from transaction hash",i),null}}setName(t){return this.pendingWarp.name=t,this}setTitle(t){return this.pendingWarp.title=t,this}setDescription(t){return this.pendingWarp.description=t,this}setPreview(t){return this.pendingWarp.preview=t,this}setActions(t){return this.pendingWarp.actions=t,this}addAction(t){return this.pendingWarp.actions.push(t),this}async build(){return this.ensure(this.pendingWarp.protocol,"protocol is required"),this.ensure(this.pendingWarp.name,"name is required"),this.ensure(this.pendingWarp.title,"title is required"),this.ensure(this.pendingWarp.actions.length>0,"actions are required"),await new b(this.config).validate(this.pendingWarp),this.pendingWarp}getDescriptionPreview(t,e=100){return K(t,e)}ensure(t,e){if(!t)throw new Error(`WarpBuilder: ${e}`)}};var Nt=class{constructor(t){this.config=t}async search(t){if(!this.config.indexUrl)throw new Error("WarpIndex: Index URL is not set");try{let e=await fetch(this.config.indexUrl,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${this.config.indexApiKey}`},body:JSON.stringify({[this.config.indexSearchParamName||"search"]:t})});if(!e.ok)throw new Error(`WarpIndex: search failed with status ${e.status}`);return(await e.json()).hits}catch(e){throw console.error("WarpIndex: Error searching for warps: ",e),e}}};export{X as BrandBuilder,d as Config,xt as WarpActionExecutor,v as WarpArgSerializer,R as WarpBuilder,y as WarpConstants,x as WarpContractLoader,Nt as WarpIndex,S as WarpLink,V as WarpRegistry,W as WarpUtils,cr as address,ar as biguint,or as boolean,dr as codemeta,tr as composite,lr as esdt,T as getChainId,A as getLatestProtocolIdentifier,ur as hex,Xe as list,gr as nothing,Ke as option,Ze as optional,F as shiftBigintBy,er as string,K as toPreviewText,B as toTypedRegistryInfo,pr as token,nr as u16,ir as u32,sr as u64,rr as u8,Ye as variadic};
